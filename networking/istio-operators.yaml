apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
  name: sro-istiocontrolplane
spec:
  profile: minimal
  hub: gcr.io/istio-release
  meshConfig:
    enableTracing: true
    accessLogFile: /dev/stdout
    extensionProviders:
    - name: "otel"
      opentelemetry:
        service: observability/otel-collector-cluster-opentelemetry-collector
        port: 4317
    - name: "oauth2-proxy"
      envoyExtAuthzHttp:
        service: "oauth2-proxy.sro.svc.cluster.local"
        port: "4180"
        includeHeadersInCheck: 
          - "authorization"
          - "cookie"
          - "x-forwarded-access-token"
          - "x-forwarded-user"
          - "x-forwarded-email"
          - "x-forwarded-proto"
          - "proxy-authorization"
          - "user-agent"
          - "x-forwarded-host"
          - "from"
          - "x-forwarded-for"
          - "accept"
          - "x-auth-request-redirect"
        headersToUpstreamOnAllow: 
          - "authorization"
          - "path"
          - "x-auth-request-user"
          - "x-auth-request-email"
          - "x-auth-request-access-token"
          - "x-forwarded-access-token"
          # - "cookie"
        headersToDownstreamOnDeny: 
          - "content-type"
          - "set-cookie"
  components:
    egressGateways:
    - name: istio-egressgateway
      enabled: true
    ingressGateways:
      - name: istio-ingressgateway
        namespace: istio-system
        enabled: true
        label:
          istio: ingressgateway
        k8s:
          # aws: start
          serviceAnnotations:
            alb.ingress.kubernetes.io/healthcheck-path: /healthz/ready
            alb.ingress.kubernetes.io/healthcheck-port: "30261"
          # aws: end
          service:
            # microk8s: start
            # externalTrafficPolicy: Local
            # microk8s: end
            # aws: start
            # type: NodePort
            # healthCheckNodePort: 15021
            # aws: end
            ports:
              - port: 15021
                targetPort: 15021
                name: status-port
                # aws: start
                # nodePort: 30261
                # aws: end
                protocol: TCP
              - port: 80
                targetPort: 8080
                name: http2
                # aws: start
                # nodePort: 31565
                # aws: end
                protocol: TCP
              - port: 443
                targetPort: 8443
                name: https
                # aws: start
                # nodePort: 31804
                # aws: end
                protocol: TCP
              - port: 15012
                targetPort: 15012
                name: tcp-istiod
                protocol: TCP
              - port: 15443
                targetPort: 15443
                name: tls
                protocol: TCP
