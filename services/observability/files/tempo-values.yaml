# Configuration for the ingester
tempo:
  fullename: tempo
  memberlist:
    appProtocol: tcp
ingester:
  replicas: 1
  config:
    replication_factor: 1
  affinity: ""
  appProtocol:
    grpc: tcp
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey

# Configuration for the metrics-generator
metricsGenerator:
  affinity: ""
  # -- Specifies whether a metrics-generator should be deployed
  enabled: false
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey

# Configuration for the distributor
distributor:
  appProtocol:
    grpc: tcp
  affinity: ""
  # -- Number of replicas for the distributor
  replicas: 1
  # -- Environment variables to add to the distributor pods
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey
# Configuration for the compactor
compactor:
  appProtocol:
    grpc: tcp
  affinity: ""
  # -- Number of replicas for the compactor
  replicas: 1
  # -- Environment variables to add to the compactor pods
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey
# Configuration for the querier
querier:
  appProtocol:
    grpc: tcp
  topologySpreadConstraints: ""
  affinity: ""
  # -- Number of replicas for the querier
  replicas: 3
  # -- Environment variables to add to the querier pods
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey
# Configuration for the query-frontend
queryFrontend:
  appProtocol:
    grpc: tcp
  affinity: ""
  query:
    # -- Required for grafana version <7.5 for compatibility with jaeger-ui. Doesn't work on ARM arch
    enabled: false
    # -- Environment variables to add to the tempo-query pods
    extraEnv:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: tempo-s3-secrets
            key: tempo-s3-accessKeyId
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: tempo-s3-secrets
            key: tempo-s3-secretAccessKey
  # -- Number of replicas for the query-frontend
  replicas: 1
  # -- Environment variables to add to the query-frontend pods
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey

multitenancyEnabled: false

traces:
  otlp:
    http:
      # -- Enable Tempo to ingest Open Telemetry HTTP traces
      enabled: true
      # -- HTTP receiver advanced config
      receiverConfig: {}
    grpc:
      # -- Enable Tempo to ingest Open Telemetry GRPC traces
      enabled: true
      # -- GRPC receiver advanced config
      receiverConfig: {}
  # -- Enable Tempo to ingest traces from Kafka. Reference: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/kafkareceiver
  kafka: {}

# To configure a different storage backend instead of local storage:
storage:
  trace:
    backend: s3
    s3:
      bucket: "sro-tempo"
      endpoint: "s3.us-east-1.amazonaws.com"
      region: us-east-1
      insecure: true
  admin:
    backend: s3
    s3:
      bucket: "sro-tempo-admin"
      endpoint: "s3.us-east-1.amazonaws.com"
      region: us-east-1
      insecure: true

# memcached is for all of the Tempo pieces to coordinate with each other.
# you can use your self memcacherd by set enable: false and host + service
memcached:
  # -- Specified whether the memcached cachce should be enabled
  enabled: true
  # Number of replicas for memchached
  replicas: 1
  # -- Environment variables to add to memcached pods
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey

# Configuration for the gateway
gateway:
  affinity: ""
  # -- Specifies whether the gateway should be enabled
  enabled: true
  # -- Number of replicas for the gateway
  replicas: 1
  # -- Environment variables to add to the gateway pods
  extraEnv:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-accessKeyId
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: tempo-s3-secrets
          key: tempo-s3-secretAccessKey

global_overrides:
  metrics_generator_processors:
    - service-graphs
    - span-metrics
memberlist:
  rejoin_interval: 60s
  dead_node_reclaim_time: 60s
