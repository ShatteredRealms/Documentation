loki:
  appProtocol: tcp
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  storage:
    type: s3
    s3:
      region: us-east-1
      endpoint: 's3.us-east-1.amazonaws.com'
      accessKeyId: '${GRAFANA_LOKI_S3_ACCESKEYID}'
      secretAccessKey: '${GRAFANA_LOKI_S3_SECRETACCESSKEY}'
      s3: s3://us-east-1/sro-loki
      http_config:
        insecure_skip_verify: true
    bucketNames:
      chunks: 'sro-loki-chunks'
      ruler: 'sro-loki-ruler'
      admin: 'sro-loki-admin'
  # -- Enable tracing
  tracing:
    enabled: true
  auth_enabled: false
  ingester:
    chunk_encoding: snappy
  querier:
    # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
    max_concurrent: 20
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true
    retention_period: 672h
  compactor:
    retention_enabled: true 
    delete_request_store: s3
compactor:
  appProtocol:
    grpc: tcp
querier:
  appProtocol:
    grpc: tcp
queryFrontend:
  appProtocol:
    grpc: tcp
ingester:
  appProtocol:
    grpc: tcp
monitoring:
  # Recording rules for monitoring Loki, required for some dashboards
  rules:
    # -- If enabled, create PrometheusRule resource with Loki recording rules
    enabled: true
    # -- Include alerting rules
    alerting: true
  # ServiceMonitor configuration
  serviceMonitor:
    # -- If enabled, ServiceMonitor resources for Prometheus Operator are created
    enabled: true
  # Self monitoring determines whether Loki should scrape its own logs.
  # This feature currently relies on the Grafana Agent Operator being installed,
  # which is installed by default using the grafana-agent-operator sub-chart.
  # It will create custom resources for GrafanaAgent, LogsInstance, and PodLogs to configure
  # scrape configs to scrape its own logs with the labels expected by the included dashboards.
  selfMonitoring:
    enabled: true
# Configuration for the write pod(s)
write:
  replicas: 1
  affinity: {}
  # -- Additional CLI args for the backend
  extraArgs:
    - "-config.expand-env=true"
  # -- Environment variables to add to the write pods
  extraEnv:
    - name: GRAFANA_LOKI_S3_ENDPOINT 
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-endpoint
    - name: GRAFANA_LOKI_S3_ACCESKEYID 
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-accessKeyId
    - name: GRAFANA_LOKI_S3_SECRETACCESSKEY
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-secretAccessKey
# Configuration for the read pod(s)
read:
  replicas: 1
  affinity: {}
  # -- Additional CLI args for the read
  extraArgs:
    - "-config.expand-env=true"
  # -- Containers to add to the read pods
  extraContainers: []
  # -- Environment variables to add to the read pods
  extraEnv:
    - name: GRAFANA_LOKI_S3_ENDPOINT 
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-endpoint
    - name: GRAFANA_LOKI_S3_ACCESKEYID 
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-accessKeyId
    - name: GRAFANA_LOKI_S3_SECRETACCESSKEY
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-secretAccessKey
# Configuration for the backend pod(s)
backend:
  replicas: 1
  affinity: {}
  # -- Additional CLI args for the backend
  extraArgs:
    - "-config.expand-env=true"
  # -- Environment variables to add to the backend pods
  extraEnv:
    - name: GRAFANA_LOKI_S3_ENDPOINT 
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-endpoint
    - name: GRAFANA_LOKI_S3_ACCESKEYID 
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-accessKeyId
    - name: GRAFANA_LOKI_S3_SECRETACCESSKEY
      valueFrom:
        secretKeyRef:
          name: loki-s3-secrets
          key: grafana-loki-s3-secretAccessKey

distributor:
  appProtocol:
    grpc: tcp

# Configuration for the memberlist service
memberlist:
  service:
    publishNotReadyAddresses: false
# Configuration for the gateway
indexGateway:
  appProtocol:
    grpc: tcp
gateway:
  replicas: 1
  service:
    appProtocol: http
  affinity: {}
  # -- Specifies whether the gateway should be enabled
  enabled: true

metrics_generator:
  # Ring configuration
  ring:
    kvstore:
      store: memberlist
  # Processor-specific configuration
  processor:
    service_graphs:
    span_metrics:
  registry:

memcached:
  appProtocol: tcp
